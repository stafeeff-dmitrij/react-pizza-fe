@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
::before,
::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

:where(address[class]) {
  font-style: normal;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями
 */
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

/**
  Плавный скролл
 */
html,
:has(:target) {
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  *,
  ::before,
  ::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
:root {
  --color-black: #232323;
  --color-yellow: #ffdf8c;
  --color-white: #ffffff;
  --color-light-gray: #f6f6f6;
  --color-gray: #dedede;
  --color-dark-gray: #656464;
  --color-light-orange: #ff6f3e;
  --color-orange: #fe5f1e;
  --color-dark-orange: #f54800;
  --border-radius-small: 5px;
  --border-radius: 10px;
  --border-radius-big: 30px;
  --border-light-gray: 1px solid var(--color-light-gray);
  --border-gray: 1px solid var(--color-gray);
  --border-dark-gray: 1px solid var(--color-dark-gray);
  --font-family-base: "Nunito", Roboto, system-ui, Tahoma, sans-serif;
  --transition-duration: 0.2s;
}

body {
  color: var(--color-black);
  font-weight: 400;
}

* {
  font-family: var(--font-family-base);
  box-sizing: border-box;
}

a,
button,
input,
textarea,
span,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

span,
p,
b,
h1,
h2,
h3,
h4,
h5 {
  color: var(--color-black);
}

body {
  background-color: var(--color-yellow);
}

.wrapper {
  width: calc(100vw - 100px);
  height: 100%;
  background-color: #fff;
  margin: 50px auto;
  border-radius: 10px;
  max-width: 1400px;
}

.container {
  margin: 0 auto;
  padding-inline: 50px;
}

.button {
  background-color: var(--color-orange);
  border-radius: 30px;
  padding: 10px 12px;
  min-width: 100px;
  text-align: center;
  cursor: pointer;
  transition: background-color var(--transition-duration) ease-in-out, border-color var(--transition-duration) ease-in-out;
  border: 1px solid transparent;
}
.button,
.button span {
  color: #fff;
}
.button i,
.button span,
.button path,
.button svg {
  transition: all var(--transition-duration) ease-in-out;
}
.button:hover {
  background-color: var(--color-dark-orange);
}
.button:active {
  background-color: var(--color-light-orange);
  transform: translateY(1px);
}

.outline {
  background-color: var(--color-white);
  border-color: var(--color-orange);
}
.outline,
.outline span {
  color: var(--color-orange);
}
.outline svg path {
  fill: var(--color-orange);
}
.outline:hover {
  background-color: var(--color-orange);
}
.outline:hover,
.outline:hover span {
  color: var(--color-white);
}
.outline:hover svg path {
  fill: var(--color-white);
}
.outline:active {
  background-color: var(--color-dark-orange);
}

/*# sourceMappingURL=styles.css.map */
